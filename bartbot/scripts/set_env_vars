#!/bin/bash

# This file will help set the environment variables
#   for local development. You'll need this for 
#   things like unittest and running files locally. 
#   This isn't necessary for running Serverless commands. 
# HACK? Still requires modifying the source... 

# TO USE: 
# Make sure you have your AWS credentials available to aws-cli.
# Before calling source .env/bin/activate, add this line to 
#     the beginning of `./<ENV_NAME>/bin/activate`:

    # source bartbot/scripts/set_env_vars

# And add the following line under `# Self destruct!` (around :38)

    # remove_vars

# Then, make sure to add your parameters to AWS parameter store. 
#     You can use: 

    # aws ssm put-parameter \
    #     --name <KEYNAME> \
    #     --type String \
    #     --value <VALNAME>

# EXTRA: Put this into `else; PS1=...` to change the color of env

    # # This changes the `(.env)` to red!
    # PS1="\[\e[31m\](`basename \"$VIRTUAL_ENV\"`) \[\e[0m\]$PS1"

# WARNING: Not including all the keys may cause problems. 
# Comment out unused keys below. 

# Names of keys/parameters to retreive from AWS Parameter Store
KEYS=(
    DARK_SKY_PRIV
    DEBUG_TOK
    BART_PRIV
    BART_PUBL
    FB_PAGE_ACCESS
    FB_PAGE_ACCESS_2
    FB_VERIFY_TOK
    WIT_SERVER_TOK
    .) 

# Extract key values from JSON object with python3
parse_params="
import sys, json 
param = json.load(sys.stdin)
print(param['Parameters'][0]['Value'])
"

import_vars () {
    echo "Importing environment variables from AWS..." >&1
    for KEY in ${KEYS[@]}:
    do
        if [[ $KEY != ".:" ]]
        then 
            VAL=$(\
            aws ssm get-parameters --names $KEY | \
            python3 -c "$parse_params")
            # Sets local variable KEYNAME="VALNAME"
            printf -v $KEY "$VAL"  
            export $KEY  # Puts KEYNAME into environment
        fi
    done

    # Prints environment variables joined by commas
    function join_by { local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}"; }
    echo "Done importing environment variables: $(join_by ", " "${KEYS[@]::${#KEYS[@]}-1}")." >&1


    remove_vars () {
        for KEY in ${KEYS[@]}:
        do
            if [[ $KEY != ".:" ]]
            then
                unset $KEY  # Removes KEYNAME from environment
            fi
        done
        unset -f import_vars
        unset -f remove_vars
        # Prints environment variables removed
        echo "Removed variables: $(join_by ", " "${KEYS[@]::${#KEYS[@]}-1}")." >&1
    }
}

import_vars
